#!/usr/bin/env python
# -*- coding: utf-8; tab-width: 4; indent-tabs-mode: t -*-
#
# NetProfile: Yandex.Money module
# Â© Copyright 2013 Alex 'Unik' Unigovsky
#
# This file is part of NetProfile.
# NetProfile is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public
# License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later
# version.
#
# NetProfile is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General
# Public License along with NetProfile. If not, see
# <http://www.gnu.org/licenses/>.

from __future__ import (
	unicode_literals,
	print_function,
	absolute_import,
	division
)

from netprofile.common.modules import ModuleBase
from netprofile.common.hooks import register_hook

from pyramid.i18n import TranslationStringFactory
_ = TranslationStringFactory('netprofile_yandexmoney')

import logging
logger = logging.getLogger(__name__)

from pyramid.response import Response

from mako.template import Template
from netprofile.db.connection import DBSession

from netprofile_xop.models import (
	ExternalOperation,
	ExternalOperationProvider,
	ExternalOperationState
)

from netprofile_core.models import (
	GlobalSetting,
	GlobalSettingSection
)

import hashlib

'''Testing, 20150521
@register_hook('np.cli.module.install.after')
def _ym_module_after_install(app, mod, sess, ret):
	if not ret:
		# Installation process already failed earlier
		return

	logger.debug('Running \'%s\' module postinstall', mod)
	ret = True
'''

class Module(ModuleBase):
	def __init__(self, mmgr):
		self.mmgr = mmgr
		mmgr.cfg.add_translation_dirs('netprofile_yandexmoney:locale/')
		mmgr.cfg.scan()

	@classmethod
	def get_deps(cls):
		return ('stashes', 'xop')

	@classmethod
	def get_models(cls):
		from netprofile_yandexmoney import models
		return (
		)

	@classmethod
	def get_sql_data(cls, modobj, sess):
		gss_ym_settings = GlobalSettingSection( # no old id
			module=modobj,
			name='Yandex.Money settings',
			description='Settings for netprofile_yandexmoney module'
		)
		sess.add(gss_ym_settings)

		sess.add(GlobalSetting(
			section=gss_ym_settings,
			module=modobj,
			name='ym_shoppass',
			title='Shop password',
			type='text',
			default='',
			value='',
			description='Shared secret key for Yandex.Kassa notifications validation'
		))

		sess.add(ExternalOperationProvider(
			uri = 'yandexmoney', # FIXME: wrong!
			name = 'Yandex.Kassa',
			short_name = 'Yandex.Kassa',
			gateway_class = 'ymkassagate',
			enabled = False,
			description = 'Yandex.Kassa external operations provider'
		))

		sess.add(GlobalSetting(
			section=gss_ym_settings,
			module=modobj,
			name='ym_sharedsecret',
			title='Shared secret',
			type='text',
			default='',
			value='',
			description='Shared secret key for Yandex.Money notifications validation'
		))

		sess.add(ExternalOperationProvider(
			uri = 'yandexmoneyzzz', # FIXME: temporary wrong
			name = 'Yandex.Money',
			short_name = 'Yandex.Money',
			gateway_class = 'ymgate',
			enabled = False,
			description = 'Yandex.Money external operations provider'
		))


	def get_css(self, request):
		return (
		)

	@property
	def name(self):
		return _('Yandex.Money')

class YandexKassa(object):
	"""
	Yandex.Kassa notifications handler class
	"""
	def __init__(self, provider):
		self.provider = provider

	def _yk_verify_md5(self, postdata):
		'''Yandex.Kassa provides MD5 hash in POST data, which was calculated using a pre-shared key.
		It should be recalculated here to make sure that request was generated by Yandex.Kassa service
		and doesn't contain errors.

		Formula is:
		md5( action;orderSumAmount;orderSumCurrencyPaycash;orderSumBankPaycash;shopId;invoiceId;customerNumber;shopPassword )

		Args:
			postdata (MultiDict): object returned by request.POST which contains all variables
				provided by Yandex.Kassa.

		Returns:
			bool: True if successful, False otherwise.

		'''

		from netprofile_core import global_setting
		shop_pass = global_setting('ym_shoppass')

		#xopid = postdata.get('operation_id', '')
		xopid = '100050000'

		concat = ';'.join((
			postdata.get('action', ''),
			postdata.get('orderSumAmount', ''),
			postdata.get('orderSumCurrencyPaycash', ''),
			postdata.get('orderSumBankPaycash', ''),
			postdata.get('shopId', ''),
			postdata.get('invoiceId', ''),
			postdata.get('customerNumber', ''),
			shop_pass
		))

		calculated_md5 = hashlib.md5(concat.encode()).hexdigest()
		goal_md5 = postdata.get('md5')

		if(goal_md5 is not None and calculated_sha1 == goal_sha1):
			logger.info('Verification of XOP \'%s\' succeeded', xopid)
			return True
		logger.warn('Verification of XOP \'%s\' failed', xopid)
		return False

	def process_request(self, request, sess):
		logger.debug('Processing request. POST: %r', request.POST)
		xop = ExternalOperation()
		xop.provider = self.provider

		if not self._yk_verify_md5(request.POST):
			xop.state = ExternalOperationState.canceled
			return []

		xop.external_id = request.POST.get('operation_id', '')
		xop.difference = request.POST.get('amount', '')

		#xop.state = ExternalOperationState.cleared
		return [xop]

	def generate_response(self, request, xoplist):
		template = Template(text="""<?xml version="1.0" encoding="UTF-8"?>
		<paymentAvisoResponse
		% for key, value in data.items():
		${key}="${value}"
		% endfor
		/>
		""")

		data = {'paramA': 100500, 'paramB': 'something'}
		result = template.render(data=data)
		#return Response(status=str('200 OK'), content_type=str('text/plain'), charset=str('UTF-8'))
		return Response(body=result, status=str('200 OK'), content_type=str('text/xml'), charset=str('UTF-8'))

class YandexMoney(object):
	def __init__(self, provider):
		self.provider = provider

	def _ym_verify_sha1(self, postdata):
		'''Yandex.Money provides SHA1 hash in POST data, which was calculated using a pre-shared key.
		It should be recalculated here to make sure that request was generated by Yandex.Money service
		and doesn't contain errors.

		Formula is:
		sha1(notification_type&operation_id&amount&currency&datetime&sender&codepro&notification_secret&label)

		Args:
			postdata (MultiDict): object returned by request.POST which contains all variables
				provided by Yandex.Money. Example:
				MultiDict
				([
					('notification_type', 'p2p-incoming'),
					('amount', '369.06'),
					('datetime', '2015-05-19T15:25:22Z'),
					('codepro', 'false'),
					('sender', '41001000040'),
					('sha1_hash', 'f2e167ac66c1d7ff697e6215615c459e5ce13238'),
					('test_notification', 'true'),
					('operation_label', ''),
					('operation_id', 'test-notification'),
					('currency', '643'),
					('label', '')
				])

		Returns:
			bool: True if successful, False otherwise.

		'''

		from netprofile_core import global_setting
		secret = global_setting('ym_sharedsecret')

		xopid = postdata.get('operation_id', '')

		concat = '&'.join((
			postdata.get('notification_type', ''),
			xopid,
			postdata.get('amount', ''),
			postdata.get('currency', ''),
			postdata.get('datetime', ''),
			postdata.get('sender', ''),
			postdata.get('codepro', ''),
			secret,
			postdata.get('label', '')
		))

		calculated_sha1 = hashlib.sha1(concat.encode()).hexdigest()
		goal_sha1 = postdata.get('sha1_hash')

		if(goal_sha1 is not None and calculated_sha1 == goal_sha1):
			logger.info('Verification of XOP \'%s\' succeeded', xopid)
			return True
		logger.warn('Verification of XOP \'%s\' failed', xopid)
		return False

	def process_request(self, request, sess):
		logger.debug('Processing request. POST: %r', request.POST)
		xop = ExternalOperation()
		xop.provider = self.provider

		if not self._ym_verify_sha1(request.POST):
			xop.state = ExternalOperationState.canceled
			return []

		xop.external_id = request.POST.get('operation_id', '')
		xop.difference = request.POST.get('amount', '')

		#xop.state = ExternalOperationState.cleared
		return [xop]

	def generate_response(self, request, xoplist):
		return Response(status=str('200 OK'), content_type=str('text/plain'), charset=str('UTF-8'))
